weighted.rating.X3712 <- as.matrix(rating.neighbors.X3712) * cors
mean.X3712 <- mean(movie.row.Tabelle.1$X3712, na.rm = TRUE)
user.mean.rating <- colMeans(movie.row.Tabelle.1, na.rm = TRUE)
top5.mean <- user.mean.rating[top5.X3712]
n.movies <- nrow(movie.row.Tabelle.1)
cors <- matrix(nrow = n.movies, ncol = 5)
means <- cors
for(i in 1:n.movies){
cors[i, ] <- as.matrix(my.cor["X3712", top5.X3712])
means[i, ] <- top5.mean
}
rating.neighbors.X3712 <- as.matrix(movie.row.Tabelle.1[ , top5.X3712]) - means
weighted.rating.X3712 <- as.matrix(rating.neighbors.X3712) * cors
weights.X3712 <- (mat.or.vec(nr = n.movies, nc = 5) + !is.na(weighted.rating.X3712) ) * cors
pred.X3712 <- mean.X3712 + rowSums(weighted.rating.X3712, na.rm = TRUE) / rowSums(weights.X3712) %>%
as.data.frame
colnames(pred.X3712) <- "prediction"
View(pred.X3712)
# Compute movie predictions
# X3867
n.movies <- nrow(movie.row.Tabelle.1)
cors <- matrix(nrow = n.movies, ncol = 5)
for(i in 1:n.movies){cors[i, ] <- as.matrix(my.cor["X3867", top5.X3867])}
rating.neighbors.X3867 <- as.matrix(movie.row.Tabelle.1[ , top5.X3867])
weighted.rating.X3867 <- as.matrix(rating.neighbors.X3867) * cors
weights.X3867 <- (mat.or.vec(nr = n.movies, nc = 5) + !is.na(weighted.rating.X3867) ) * cors
pred.X3867 <- rowSums(weighted.rating.X3867, na.rm = TRUE) / rowSums(weights.X3867) %>%
as.data.frame
colnames(pred.X3867) <- "prediction"
# X 3712
n.movies <- nrow(movie.row.Tabelle.1)
cors <- matrix(nrow = n.movies, ncol = 5)
for(i in 1:n.movies){cors[i, ] <- as.matrix(my.cor["X3712", top5.X3712])}
rating.neighbors.X3712 <- as.matrix(movie.row.Tabelle.1[ , top5.X3712])
weighted.rating.X3712 <- as.matrix(rating.neighbors.X3712) * cors
weights.X3712 <- (mat.or.vec(nr = n.movies, nc = 5) + !is.na(weighted.rating.X3712) ) * cors
pred.X3712 <- rowSums(weighted.rating.X3712, na.rm = TRUE) / rowSums(weights.X3712) %>%
as.data.frame
colnames(pred.X3712) <- "prediction"
# X 89
n.movies <- nrow(movie.row.Tabelle.1)
cors <- matrix(nrow = n.movies, ncol = 5)
for(i in 1:n.movies){cors[i, ] <- as.matrix(my.cor["X89", top5.X89])}
rating.neighbors.X89 <- as.matrix(movie.row.Tabelle.1[ , top5.X89])
weighted.rating.X89 <- as.matrix(rating.neighbors.X89) * cors
weights.X89 <- (mat.or.vec(nr = n.movies, nc = 5) + !is.na(weighted.rating.X89) ) * cors
pred.X89 <- rowSums(weighted.rating.X89, na.rm = TRUE) / rowSums(weights.X89) %>%
as.data.frame
colnames(pred.X89) <- "prediction"
# Same thing normalized
# X 3712
mean.X3712 <- mean(movie.row.Tabelle.1$X3712, na.rm = TRUE)
user.mean.rating <- colMeans(movie.row.Tabelle.1, na.rm = TRUE)
top5.mean <- user.mean.rating[top5.X3712]
n.movies <- nrow(movie.row.Tabelle.1)
cors <- matrix(nrow = n.movies, ncol = 5)
means <- cors
for(i in 1:n.movies){
cors[i, ] <- as.matrix(my.cor["X3712", top5.X3712])
means[i, ] <- top5.mean
}
rating.neighbors.X3712 <- as.matrix(movie.row.Tabelle.1[ , top5.X3712]) - means
weighted.rating.X3712 <- as.matrix(rating.neighbors.X3712) * cors
weights.X3712 <- (mat.or.vec(nr = n.movies, nc = 5) + !is.na(weighted.rating.X3712) ) * cors
pred.X3712.normalized <- mean.X3712 + rowSums(weighted.rating.X3712, na.rm = TRUE) / rowSums(weights.X3712) %>%
as.data.frame
colnames(pred.X3712.normalized) <- "prediction"
# X 89
mean.X89 <- mean(movie.row.Tabelle.1$X89, na.rm = TRUE)
user.mean.rating <- colMeans(movie.row.Tabelle.1, na.rm = TRUE)
top5.mean <- user.mean.rating[top5.X89]
n.movies <- nrow(movie.row.Tabelle.1)
cors <- matrix(nrow = n.movies, ncol = 5)
means <- cors
for(i in 1:n.movies){
cors[i, ] <- as.matrix(my.cor["X89", top5.X89])
means[i, ] <- top5.mean
}
rating.neighbors.X89 <- as.matrix(movie.row.Tabelle.1[ , top5.X89]) - means
weighted.rating.X89 <- as.matrix(rating.neighbors.X89) * cors
weights.X89 <- (mat.or.vec(nr = n.movies, nc = 5) + !is.na(weighted.rating.X89) ) * cors
pred.X89.normalized <- mean.X89 + rowSums(weighted.rating.X89, na.rm = TRUE) / rowSums(weights.X89) %>%
as.data.frame
colnames(pred.X89.normalized) <- "prediction"
# X 3867
mean.X3867 <- mean(movie.row.Tabelle.1$X3867, na.rm = TRUE)
user.mean.rating <- colMeans(movie.row.Tabelle.1, na.rm = TRUE)
top5.mean <- user.mean.rating[top5.X3867]
n.movies <- nrow(movie.row.Tabelle.1)
cors <- matrix(nrow = n.movies, ncol = 5)
means <- cors
for(i in 1:n.movies){
cors[i, ] <- as.matrix(my.cor["X3867", top5.X3867])
means[i, ] <- top5.mean
}
rating.neighbors.X3867 <- as.matrix(movie.row.Tabelle.1[ , top5.X3867]) - means
weighted.rating.X3867 <- as.matrix(rating.neighbors.X3867) * cors
weights.X3867 <- (mat.or.vec(nr = n.movies, nc = 5) + !is.na(weighted.rating.X3867) ) * cors
pred.X3867.normalized <- mean.X3867 + rowSums(weighted.rating.X3867, na.rm = TRUE) / rowSums(weights.X3867) %>%
as.data.frame
colnames(pred.X3867.normalized) <- "prediction"
View(pred.X3867)
View(pred.X89)
View(pred.X3867.normalized)
View(pred.X89.normalized)
Ratings.Tabelle.1 <- read.csv("~/Downloads/Assignment 5/Ratings-Tabelle 1.csv", row.names=1)
View(Ratings.Tabelle.1)
NormRatings.Tabelle.1 <- read.csv("~/Downloads/Assignment 5/NormRatings-Tabelle 1.csv", row.names=1)
View(NormRatings.Tabelle.1)
library(dplyr)
Ratings.Tabelle <- Ratings.Tabelle.1[ , 1:20]
CosMissing <- function(df){
n.movies <- ncol(df)
n.users <- nrow(df) - 2
my.cor <- matrix(nrow = n.movies, ncol = n.movies)
df <- df[1:20, ]
sapply(1:n.movies, function(movie.i){
users.movie.i <- which(!is.na(df[ , movie.i]))
sapply(1:n.movies, function(movie.j){
users.movie.j <- which(!is.na(df[, movie.j]))
common.users <- intersect(users.movie.i, users.movie.j)
users.i <- df[common.users, movie.i]
users.j <- df[common.users, movie.j]
my.cor[movie.i, movie.j] <- sum(users.i * users.j) /
(sqrt(sum(df[users.movie.i, movie.i]^2)) * sqrt(sum(df[users.movie.j, movie.j]^2)))
})
})
}
sim.ratings <- CosMissing(Ratings.Tabelle) %>% data.frame
sim.normalized <- CosMissing(NormRatings.Tabelle.1) %>% data.frame
colnames(sim.ratings) <- colnames(Ratings.Tabelle)[1:20]
rownames(sim.ratings) <- colnames(Ratings.Tabelle)[1:20]
colnames(sim.normalized) <- colnames(NormRatings.Tabelle.1)[1:20]
rownames(sim.normalized) <- colnames(NormRatings.Tabelle.1)[1:20]
ratings.5277 <- Ratings.Tabelle[2, ]
ratings.normalized.5277 <- NormRatings.Tabelle.1[2, ]
ratings.matrix <- as.matrix(ratings.5277)
ratings.matrix[is.na(ratings.matrix)] <- 0
sim.matrix <- as.matrix(sim.ratings)
sim.matrix[is.na(sim.matrix)] <- 0
scores.5277 <- ratings.matrix %*% sim.matrix %>% as.matrix %>% t
sim.matrix.weights <- as.matrix(sim.ratings)
sim.matrix.weights[is.na(as.matrix(ratings.5277)), ] <- NA
weights <- colSums(sim.matrix.weights)
test <- scores.5277 / weights
weights <- colSums(sim.matrix.weights, na.rm = TRUE)
test <- scores.5277 / weights
test
View(test)
ratings.5277 <- Ratings.Tabelle[2, ]
ratings.normalized.5277 <- NormRatings.Tabelle.1[2, ]
ratings.matrix <- as.matrix(ratings.5277)
ratings.matrix[is.na(ratings.matrix)] <- 0
sim.matrix <- as.matrix(sim.ratings)
sim.matrix[is.na(sim.matrix)] <- 0
scores.5277 <- ratings.matrix %*% sim.matrix %>% as.matrix %>% t
View(scores.5277)
sim.matrix.weights <- as.matrix(sim.ratings)
sim.matrix.weights[is.na(as.matrix(ratings.5277)), ] <- NA
weights <- colSums(sim.matrix.weights, na.rm = TRUE)
sim.matrix.weights[is.na(ratings.5277), ] <- NA
weights <- colSums(sim.matrix.weights, na.rm = TRUE)
weights
View(sim.matrix.weights)
ratings.normalized.5277 <- NormRatings.Tabelle.1[2, ]
ratings.normalized.5277 <- NormRatings.Tabelle.1[2, ]
ratings.matrix <- as.matrix(ratings.normalized.5277)
ratings.matrix[is.na(ratings.matrix)] <- 0
sim.matrix <- as.matrix(sim.normalized)
sim.matrix[is.na(sim.matrix)] <- 0
scores.5277 <- ratings.matrix %*% sim.matrix %>% as.matrix %>% t
sim.matrix.weights <- as.matrix(sim.normalized)
sim.matrix.weights[is.na(ratings.normalized.5277), ] <- NA
weights <- colSums(sim.matrix.weights, na.rm = TRUE)
test <- scores.5277 / weights
View(test)
View(sim.normalized)
View(test)
ratings.normalized.5277
ratings.normalized.5277 == 0
View(ratings.normalized.5277)
ratings.5277 <- Ratings.Tabelle[2, ]
View(ratings.5277)
ratings.5277 <- Ratings.Tabelle[2, ]
scores <- matrix(nrow = 20, ncol = 20)
for(i in 1:20){score[i, ] <- ratings.5277}
for(i in 1:20){scores[i, ] <- ratings.5277}
for(i in 1:20){scores[i, ] <- ratings.5277 %>% as.matrix}
for(i in 1:20){scores[i, ] <- ratings.5277 %>% as.matrix %>% t %>% as.vector}
ratings.5277 %>% as.matrix %>% t %>% as.vector
for(i in 1:20){scores[i, ] <- (ratings.5277 %>% as.matrix %>% t %>% as.vector)}
scores
scores <- matrix(nrow = 20, ncol = 20)
scores
i <- 1
scores[i, ] <- (ratings.5277 %>% as.matrix %>% t %>% as.vector)
scores
ratings.5277 <- Ratings.Tabelle[2, ]
scores <- matrix(nrow = 20, ncol = 20)
for(i in 1:20){scores[i, ] <- (ratings.5277 %>% as.matrix %>% t %>% as.vector)}
View(scores)
scores.weighted <- sim.matrix * score
scores.weighted <- sim.matrix * scores
View(scores.weighted)
sim.matrix
scores.weighted <- sim.matrix[sim.matrix >= 0] * scores
sim.matrix
sim.matrix > 0
sim.matrix[sim.matrix > 0]
sim.ratings.greaterzero <- sim.ratings
sim.ratingsgeaterzero[sim.ratings < 0] <- NA
sim.ratings.geaterzero[sim.ratings < 0] <- NA
sim.ratings.greaterzero[sim.ratings < 0] <- NA
scores.weighted <- sim.ratings.greaterzero * scores
View(scores.weighted)
scores.weighted <- sim.ratings.greaterzero * scores
View(scores.weighted)
View(sim.ratings.greaterzero)
View(sim.ratings.greaterzero)
View(scores.weighted)
weights.ind.na <- which(is.na(scores.weighted[1, ]))
View(sim.ratings)
sims[weights.ind.na, ] <- NA
sims <- sim.ratings
sims[weights.ind.na, ] <- NA
View(sims)
sims[ , weights.ind.na] <- NA
sims <- sim.ratings
sims[ , weights.ind.na] <- NA
View(sims)
weights <- rowSums(sims)
weights <- rowSums(sims, na.rm = TRUE)
weights
preds <- rowSums(scores.weighted)
preds <- rowSums(scores.weighted, na.rm = TRUE) / weights
preds
View(scores.weighted)
View(scores.weighted)
weights
View(sims)
View(Ratings.Tabelle)
View(scores.weighted)
View(sims)
preds
sort(preds)
View(scores.weighted)
ratings.5277 <- NormRatings.Tabelle.1[2, ]
scores <- matrix(nrow = 20, ncol = 20)
for(i in 1:20){scores[i, ] <- (ratings.5277 %>% as.matrix %>% t %>% as.vector)}
sim.ratings.greaterzero <- sim.normalized
sim.ratings.greaterzero[sim.ratings < 0] <- NA
scores.weighted <- sim.ratings.greaterzero * scores
weights.ind.na <- which(is.na(scores.weighted[1, ]))
sims <- sim.normalized
sims[ , weights.ind.na] <- NA
weights <- rowSums(sims, na.rm = TRUE)
preds <- rowSums(scores.weighted, na.rm = TRUE) / weights
sort(preds)
ratings.5277 <- NormRatings.Tabelle.1[2, ]
scores <- matrix(nrow = 20, ncol = 20)
for(i in 1:20){scores[i, ] <- (ratings.5277 %>% as.matrix %>% t %>% as.vector)}
View(scores)
rm(scores)
scores <- matrix(nrow = 20, ncol = 20)
for(i in 1:20){scores[i, ] <- (ratings.5277 %>% as.matrix %>% t %>% as.vector)}
View(scores)
sim.ratings.greaterzero <- sim.normalized
sim.ratings.greaterzero[sim.ratings < 0] <- NA
View(sim.ratings.greaterzero)
sim.ratings.greaterzero[sim.normalized < 0] <- NA
View(sim.ratings.greaterzero)
scores.weighted <- sim.ratings.greaterzero * scores
View(scores.weighted)
View(scores.weighted)
weights.ind.na <- which(is.na(scores.weighted))
sims <- sim.normalized
sims[weights.ind.na] <- NA
View(scores.weighted)
sim.normalized
View(sim.normalized)
sim.normalized * is.na(weights.ind.na)
View(sim.normalized * is.na(weights.ind.na))
View(sim.normalized )
View(sim.normalized * !is.na(scores.weighted))
sims <- sim.normalized * !is.na(scores.weighted)
weights <- rowSums(sims)
preds <- rowSums(scores.weighted, na.rm = TRUE) / weights
sort(preds)
ratings.5277 <- NormRatings.Tabelle.1[2, ]
scores <- matrix(nrow = 20, ncol = 20)
for(i in 1:20){scores[i, ] <- (ratings.5277 %>% as.matrix %>% t %>% as.vector)}
sim.ratings.greaterzero <- sim.normalized
sim.ratings.greaterzero[sim.normalized < 0] <- NA
scores.weighted <- sim.ratings.greaterzero * scores
sims <- sim.normalized * !is.na(scores.weighted)
weights <- rowSums(sims)
preds <- rowSums(scores.weighted, na.rm = TRUE) / weights
sort(preds)
ratings.5277 <- NormRatings.Tabelle.1[2, ]
scores <- matrix(nrow = 20, ncol = 20)
for(i in 1:20){scores[i, ] <- (ratings.5277 %>% as.matrix %>% t %>% as.vector)}
sim.ratings.greaterzero <- sim.normalized
sim.ratings.greaterzero[sim.normalized < 0] <- NA
scores.weighted <- sim.ratings.greaterzero * scores
sims <- sim.normalized * !is.na(scores.weighted)
weights <- rowSums(sims)
preds <- rowSums(scores.weighted, na.rm = TRUE) / weights
sort(preds)
sim.ratings.greaterzero[sim.normalized <= 0] <- NA
scores.weighted <- sim.ratings.greaterzero * scores
sims <- sim.normalized * !is.na(scores.weighted)
weights <- rowSums(sims)
preds <- rowSums(scores.weighted, na.rm = TRUE) / weights
sort(prprecip)
sort(preds)
View(scores.weighted)
View(sims)
Items.Tabelle.1 <- read.csv("~/Downloads/Assignment 6/Items-Tabelle 1.csv", row.names=1)
View(Items.Tabelle.1)
View(Items.Tabelle.1)
weights <- Items.Tabelle.1[2:ncol((Items.Tabelle.1) - 2) , 1]
weights
View(Items.Tabelle.1)
weights <- Items.Tabelle.1[1, 2:ncol((Items.Tabelle.1) - 2)]
View(weights)
library(dplyr)
weights <- Items.Tabelle.1[1, 2:ncol((Items.Tabelle.1) - 2)] %>% as.vector
View(weights)
weights <- Items.Tabelle.1[1, 2:ncol((Items.Tabelle.1) - 2)] %>% t
View(weights)
weights <- (Items.Tabelle.1[1, 2:ncol((Items.Tabelle.1) - 2)] %>% t)$V1
weights <- (Items.Tabelle.1[1, 2:ncol((Items.Tabelle.1) - 2)] %>% t)
View(weights)
View(Items.Tabelle.1)
featuers.items <- Items.Tabelle.1[3:nrow(Items.Tabelle.1), 2:ncol((Items.Tabelle.1) - 2)]
View(featuers.items)
features.items <- Items.Tabelle.1[3:nrow(Items.Tabelle.1), 2:ncol((Items.Tabelle.1) - 2)]
Users.Tabelle.1 <- read.csv("~/Downloads/Assignment 6/Users-Tabelle 1.csv", row.names=1)
View(Users.Tabelle.1)
first.feature <- features.items[ , 1]
View(featuers.items)
first.feature <- features.items[ , 1] %>% arrange(X1)
View(featuers.items)
first.feature <- features.items[ , 1] %>% sort
first.feature <- features.items[ , 1] %>% sort(decreasing = TRUE)
first.feature
first.feature <- features.items[ , 1] %>% order(decreasing = TRUE)
first.feature[1:5]
rownames(features.items[first.feature[1:5]])
rownames(features.items[first.feature[1:5], ])
second.feature <- features.items[ , 2] %>% order(decreasing = TRUE)
second.feature <- features.items[ , 2] %>% order(decreasing = TRUE)
rownames(features.items[second.feature[1:5], ])
diag(weights)
?diag
diag(weights, nrow = length(weights), ncol = length(weights))
diag(weights, nrow = length(weights))
diag(weights)
diag(x = 1, nrow = length(weights))
weights.matrix <- diag(1, nrow = length(weights)) * weights
weights.matrix <- diag(weights
weights.matrix <- diag(weights)
weights.matrix <- diag(weights[ , 1])
predictions <- features.item %*% weight.matrix
predictions <- features.items %*% weight.matrix
predictions <- features.items %*% weights.matrix
predictions <- as.matrix(features.items) %*% weights.matrix
View(predictions)
View(features.items)
weights
weights.matrix <- diag(weights[1:15 , 1])
as.matrix(features.items)
predictions <- as.matrix(features.items)[ , 1:15] %*% weights.matrix
View(predictions)
predictions <- as.matrix(features.items)[ , 1:15] %*% weights.matrix %*% as.matrix(Users.Tabelle.1)
predictions <- as.matrix(features.items)[ , 1:15] %*% weights.matrix %*% t(as.matrix(Users.Tabelle.1))
View(predictions)
5 * 55 + 2 * 5 - 290
5 * 51 + 2 * 15 - 290
5 * 51 + 2 * 18 - 290
5 * 63 + 2 * 8 - 290
51 + 18 - 70
63 + 8 - 70
100 - 61 + 40 - 8
dl10 <- function(x, y){abs(x) + abs(y)}
dl11 <- function(x,y){abs(x - 100) + abs(y - 40)}
dl20 <- function(x, y){x^2 + y^2 }
dl21 <- function(x, y{(x - 100)^2 + (y - 40)^2 })
dl21 <- function(x, y){(x - 100)^2 + (y - 40)^2 }
dl10(61, 8) - dl11(61, 8)
dl1 <- function(x, y){abs(x) + abs(y) - abs(x - 100) + abs(y - 40)}
dl2 <- function(x, y){x^2 + y^2 - (x - 100)^2 + (y - 40)^2}
dl1(61, 8)
dl1 <- function(x, y){abs(x) + abs(y) - abs(x - 100) - abs(y - 40)}
dl2 <- function(x, y){x^2 + y^2 - (x - 100)^2 - (y - 40)^2}
dl1(61, 8)
dl2(61, 8)
dl1(63, 8)
dl2(63, 8)
dl1(52, 13)
dl2(52, 13)
dl1(66, 5)
dl2(66, 5)
dl1(51, 15)
dl2(51, 15)
dl1(50, 18)
dl2(50, 18)
dl1(61, 10)
dl1(61, 8)
dl1(58, 13)
dl1(57, 5)
dl2(57, 5)
N <- 20000
4 * N^2
N <- 50000
4 * N^2
N <- 30
4 * N^2
N <- 60
4 * N^2
24 * 80
24 * 200
40^2 * 2
10^2 * 2
10000^2 * 2 / (12 * 40000000)
10000^2 * 2
exp(-20/99)
5 * 8^2 + 5 * 7^2
11 / 3 * 75
(17) / 3 * 75
(11 + 7 + 5) / 3 * 75
5 * 75
8^2 * + 7 ^2
8^2 + 7^2
113 * 5
10 * (1 + log(40 / 15))
10 * (1 + log(40 / 30))
m <- 10
t <- 40
m * (t / 15)^(1/2)
m * (t / 30)^(1/2)
install.packages("Statnet")
install.packages("statnet")
library(statnet)
library(statnet)
rm(list = ls())
setwd("~/Desktop/Networks/Social_Networks")
library(igraph)
?"ergm"
library(igraph)
florentine_graph <- read.graph(file = "florentine.dat")
?read.graph
data(florentine)
data(florentine)
plot(flomarriage)
florentine_egess <- ergm( flomarriage ~ edges)
florentine_egess <- ergm(flomarriage ~ edges)
florentine_egess
florentine_edges
florentine_edges <- ergm(flomarriage ~ edges)
florentine_edges
inv.logit
install.packages("boot")
library(boot)
inv.logit(p)
inv.logit(2)
p <- inv.logit(florentine_edges$coef)
p
florentine_edges_triangles <- ergm(flomarriage ~ edges + triangles)
florentine_edges_triangles
florentine_edges_triangles$coef
florentine_edges_triangles$coef$triangle
florentine_edges_triangles$coef['triangle']
library(dplyr)
sapply(1:10, GraphCoef(flomarriage)) %>% median
GraphCoef <- function(input_graph){
# Fits an ERGM model with edges and triangles and returns the coefficient
# for the number of triangles
#
# Args: input_graph: graph that is readable by igraph
#
# Returns: float number that is the coefficient for the number of triangles
ergm_model <- ergm(input_graph ~ edges + triangles)
return(ergm_model$coef)['triangle']
}
sapply(1:10, GraphCoef(flomarriage)) %>% median
GraphCoef(flomarriage)
sapply(1:10, function(i) {GraphCoef(flomarriage)}) %>% median
sapply(1:10, function(i) {GraphCoef(flomarriage)}) %>% median
?ergm
GraphCoef <- function(input_graph){
# Fits an ERGM model with edges and triangles and returns the coefficient
# for the number of triangles
#
# Args: input_graph: graph that is readable by igraph
#
# Returns: float number that is the coefficient for the number of triangles
ergm_model <- ergm(input_graph ~ edges + triangles, verbose = FALSE)
return(ergm_model$coef)['triangle']
}
sapply(1:10, function(i) {GraphCoef(flomarriage)}) %>% median
```{r, echo = FALSE}
GraphCoef <- function(input_graph){
# Fits an ERGM model with edges and triangles and returns the coefficient
# for the number of triangles
#
# Args: input_graph: graph that is readable by igraph
#
# Returns: float number that is the coefficient for the number of triangles
ergm_model <- ergm(input_graph ~ edges + triangles, verbose = FALSE)
return(ergm_model$coef)['triangle']
}
